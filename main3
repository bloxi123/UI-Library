local AstraHub = {}
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")

-- Core UI setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AstraHub"
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Loading Screen
local function showLoadingScreen()
    local loadingFrame = Instance.new("Frame")
    loadingFrame.Size = UDim2.new(1, 0, 1, 0)
    loadingFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    loadingFrame.BackgroundTransparency = 0.2
    loadingFrame.Parent = ScreenGui

    local loadingText = Instance.new("TextLabel")
    loadingText.Size = UDim2.new(0.5, 0, 0.3, 0)
    loadingText.Position = UDim2.new(0.25, 0, 0.35, 0)
    loadingText.BackgroundTransparency = 1
    loadingText.Text = "Astra Hub\nLoading...\nMade by bloxi199 on Discord!"
    loadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    loadingText.TextScaled = true
    loadingText.Font = Enum.Font.SourceSansBold
    loadingText.Parent = loadingFrame

    wait(2) -- Simulate loading
    local tween = TweenService:Create(loadingFrame, TweenInfo.new(0.5), {BackgroundTransparency = 1})
    tween:Play()
    for _, child in pairs(loadingFrame:GetChildren()) do
        if child:IsA("TextLabel") then
            TweenService:Create(child, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
        end
    end
    tween.Completed:Connect(function()
        loadingFrame:Destroy()
    end)
end

-- Window creation
function AstraHub:CreateWindow(config)
    local window = {}
    local name = config.Name or "Astra Hub"
    local icon = config.Icon or 0
    local theme = config.Theme or "Default"
    local configSaving = config.ConfigurationSaving or {Enabled = false}
    local discord = config.Discord or {Enabled = false}
    local keySystem = config.KeySystem or false
    local keySettings = config.KeySettings or {}

    -- Main window frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 600, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    mainFrame.BackgroundTransparency = 0.4
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = ScreenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8) 
    corner.Parent = mainFrame

    -- Topbar
    local topbar = Instance.new("Frame")
    topbar.Size = UDim2.new(1, 0, 0, 30)
    topbar.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    topbar.BackgroundTransparency = 0.4
    topbar.BorderSizePixel = 0
    topbar.Parent = mainFrame

    local topbarCorner = Instance.new("UICorner")
    topbarCorner.CornerRadius = UDim.new(0, 8)
    topbarCorner.Parent = topbar

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0.5, 0, 1, 0)
    title.Position = UDim2.new(0.05, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = name
    title.TextColor3 = Color3.fromRGB(240, 240, 240)
    title.TextScaled = true
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Font = Enum.Font.SourceSansBold
    title.Parent = topbar

    -- Control buttons
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.BackgroundTransparency = 1
    closeButton.Text = "×"
    closeButton.TextColor3 = Color3.fromRGB(240, 240, 240)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = topbar

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    minimizeButton.Position = UDim2.new(1, -60, 0, 0)
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.Text = "−"
    minimizeButton.TextColor3 = Color3.fromRGB(240, 240, 240)
    minimizeButton.TextScaled = true
    minimizeButton.Font = Enum.Font.SourceSansBold
    minimizeButton.Parent = topbar

    -- Dragging functionality
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Minimize/Close functionality
    local minimized = false
    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        mainFrame:TweenSize(minimized and UDim2.new(0, 600, 0, 30) or UDim2.new(0, 600, 0, 400), "Out", "Quad", 0.3, true)
    end)

    closeButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Tab container
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0, 150, 1, -30)
    tabContainer.Position = UDim2.new(0, 0, 0, 30)
    tabContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabContainer.BackgroundTransparency = 0.4
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = mainFrame

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Vertical
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Parent = tabContainer

    local contentArea = Instance.new("ScrollingFrame")
    contentArea.Size = UDim2.new(1, -150, 1, -30)
    contentArea.Position = UDim2.new(0, 150, 0, 30)
    contentArea.BackgroundTransparency = 1
    contentArea.BorderSizePixel = 0
    contentArea.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentArea.ScrollBarThickness = 4
    contentArea.Parent = mainFrame

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = contentArea

    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentArea.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y)
    end)

    -- Theme management
    local themes = {
        Default = {
            TextColor = Color3.fromRGB(240, 240, 240),
            Background = Color3.fromRGB(25, 25, 25),
            Topbar = Color3.fromRGB(34, 34, 34),
            TabBackground = Color3.fromRGB(30, 30, 30),
            ElementBackground = Color3.fromRGB(35, 35, 35),
            ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
        },
        -- Add other themes here
    }

    local function applyTheme(themeName)
        local themeData = type(themeName) == "table" and themeName or themes[themeName] or themes.Default
        mainFrame.BackgroundColor3 = themeData.Background
        topbar.BackgroundColor3 = themeData.Topbar
        tabContainer.BackgroundColor3 = themeData.TabBackground
        title.TextColor3 = themeData.TextColor
    end

    applyTheme(theme)

    function window:ModifyTheme(newTheme)
        applyTheme(newTheme)
    end

    -- Notification system
    function window:Notify(config)
        local notification = Instance.new("Frame")
        notification.Size = UDim2.new(0, 300, 0, 100)
        notification.Position = UDim2.new(1, -320, 1, -120)
        notification.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        notification.BackgroundTransparency = 0.4
        notification.Parent = ScreenGui

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = notification

        local title = Instance.new("TextLabel")
        title.Size = UDim2.new(1, 0, 0, 30)
        title.BackgroundTransparency = 1
        title.Text = config.Title or "Notification"
        title.TextColor3 = Color3.fromRGB(240, 240, 240)
        title.TextScaled = true
        title.Font = Enum.Font.SourceSansBold
        title.Parent = notification

        local content = Instance.new("TextLabel")
        content.Size = UDim2.new(1, 0, 0, 70)
        content.Position = UDim2.new(0, 0, 0, 30)
        content.BackgroundTransparency = 1
        content.Text = config.Content or ""
        content.TextColor3 = Color3.fromRGB(200, 200, 200)
        content.TextScaled = true
        content.TextWrapped = true
        content.Font = Enum.Font.SourceSans
        content.Parent = notification

        spawn(function()
            wait(config.Duration or 5)
            local tween = TweenService:Create(notification, TweenInfo.new(0.5), {BackgroundTransparency = 1})
            tween:Play()
            for _, child in pairs(notification:GetChildren()) do
                if child:IsA("TextLabel") then
                    TweenService:Create(child, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
                end
            end
            tween.Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end

    -- Tab creation
    function window:CreateTab(title, icon)
        local tab = {}
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, 0, 0, 40)
        tabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        tabButton.BackgroundTransparency = 0.4
        tabButton.Text = title
        tabButton.TextColor3 = Color3.fromRGB(240, 240, 240)
        tabButton.TextScaled = true
        tabButton.Font = Enum.Font.SourceSansBold
        tabButton.Parent = tabContainer

        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.Visible = false
        tabContent.Parent = contentArea

        local tabContentLayout = Instance.new("UIListLayout")
        tabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabContentLayout.Padding = UDim.new(0, 5)
        tabContentLayout.Parent = tabContent

        local function showTab()
            for _, child in pairs(contentArea:GetChildren()) do
                if child:IsA("Frame") then
                    child.Visible = child == tabContent
                end
            end
            for _, btn in pairs(tabContainer:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.BackgroundColor3 = btn == tabButton and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(35, 35, 35)
                end
            end
        end

        tabButton.MouseButton1Click:Connect(showTab)

        -- Element creation functions
        function tab:CreateSection(title)
            local section = Instance.new("TextLabel")
            section.Size = UDim2.new(1, -10, 0, 30)
            section.BackgroundTransparency = 1
            section.Text = title
            section.TextColor3 = Color3.fromRGB(240, 240, 240)
            section.TextScaled = true
            section.TextXAlignment = Enum.TextXAlignment.Left
            section.Font = Enum.Font.SourceSansBold
            section.Parent = tabContent

            return {
                Set = function(newTitle)
                    section.Text = newTitle
                end
            }
        end

        function tab:CreateDivider()
            local divider = Instance.new("Frame")
            divider.Size = UDim2.new(1, -10, 0, 2)
            divider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            divider.BackgroundTransparency = 0.5
            divider.BorderSizePixel = 0
            divider.Parent = tabContent

            return {
                Set = function(visible)
                    divider.Visible = visible
                end
            }
        end

        function tab:CreateButton(config)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -10, 0, 40)
            button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            button.BackgroundTransparency = 0.4
            button.Text = config.Name or "Button"
            button.TextColor3 = Color3.fromRGB(240, 240, 240)
            button.TextScaled = true
            button.Font = Enum.Font.SourceSans
            button.Parent = tabContent

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = button

            button.MouseButton1Click:Connect(function()
                if config.Callback then
                    config.Callback()
                end
            end)

            return {
                Set = function(newName)
                    button.Text = newName
                end
            }
        end

        function tab:CreateToggle(config)
            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(1, -10, 0, 40)
            toggle.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            toggle.BackgroundTransparency = 0.4
            toggle.Text = config.Name or "Toggle"
            toggle.TextColor3 = Color3.fromRGB(240, 240, 240)
            toggle.TextScaled = true
            toggle.TextXAlignment = Enum.TextXAlignment.Left
            toggle.Font = Enum.Font.SourceSans
            toggle.Parent = tabContent

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = toggle

            local toggleIndicator = Instance.new("Frame")
            toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
            toggleIndicator.Position = UDim2.new(1, -30, 0.5, -10)
            toggleIndicator.BackgroundColor3 = config.CurrentValue and Color3.fromRGB(0, 146, 214) or Color3.fromRGB(100, 100, 100)
            toggleIndicator.Parent = toggle

            local indicatorCorner = Instance.new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(0, 4)
            indicatorCorner.Parent = toggleIndicator

            toggle.MouseButton1Click:Connect(function()
                config.CurrentValue = not config.CurrentValue
                toggleIndicator.BackgroundColor3 = config.CurrentValue and Color3.fromRGB(0, 146, 214) or Color3.fromRGB(100, 100, 100)
                if config.Callback then
                    config.Callback(config.CurrentValue)
                end
            end)

            return {
                CurrentValue = config.CurrentValue,
                Set = function(value)
                    config.CurrentValue = value
                    toggleIndicator.BackgroundColor3 = value and Color3.fromRGB(0, 146, 214) or Color3.fromRGB(100, 100, 100)
                    if config.Callback then
                        config.Callback(value)
                    end
                end
            }
        end

        function tab:CreateColorPicker(config)
            local colorPicker = Instance.new("TextButton")
            colorPicker.Size = UDim2.new(1, -10, 0, 40)
            colorPicker.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            colorPicker.BackgroundTransparency = 0.4
            colorPicker.Text = config.Name or "Color Picker"
            colorPicker.TextColor3 = Color3.fromRGB(240, 240, 240)
            colorPicker.TextScaled = true
            colorPicker.TextXAlignment = Enum.TextXAlignment.Left
            colorPicker.Font = Enum.Font.SourceSans
            colorPicker.Parent = tabContent

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = colorPicker

            local colorIndicator = Instance.new("Frame")
            colorIndicator.Size = UDim2.new(0, 20, 0, 20)
            colorIndicator.Position = UDim2.new(1, -30, 0.5, -10)
            colorIndicator.BackgroundColor3 = config.Color or Color3.fromRGB(255, 255, 255)
            colorIndicator.Parent = colorPicker

            local indicatorCorner = Instance.new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(0, 4)
            indicatorCorner.Parent = colorIndicator

            colorPicker.MouseButton1Click:Connect(function()
                -- Simplified color picker (would need external color picker UI for full functionality)
                local newColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
                colorIndicator.BackgroundColor3 = newColor
                if config.Callback then
                    config.Callback(newColor)
                end
            end)

            return {
                Set = function(newColor)
                    colorIndicator.BackgroundColor3 = newColor
                    if config.Callback then
                        config.Callback(newColor)
                    end
                end
            }
        end

        function tab:CreateSlider(config)
            local slider = Instance.new("Frame")
            slider.Size = UDim2.new(1, -10, 0, 60)
            slider.BackgroundTransparency = 1
            slider.Parent = tabContent

            local title = Instance.new("TextLabel")
            title.Size = UDim2.new(1, 0, 0, 20)
            title.BackgroundTransparency = 1
            title.Text = config.Name or "Slider"
            title.TextColor3 = Color3.fromRGB(240, 240, 240)
            title.TextScaled = true
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Font = Enum.Font.SourceSans
            title.Parent = slider

            local sliderBar = Instance.new("Frame")
            sliderBar.Size = UDim2.new(1, 0, 0, 10)
            sliderBar.Position = UDim2.new(0, 0, 0, 30)
            sliderBar.BackgroundColor3 = Color3.fromRGB(50, 138, 220)
            sliderBar.BackgroundTransparency = 0.4
            sliderBar.Parent = slider

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 4)
            corner.Parent = sliderBar

            local progress = Instance.new("Frame")
            progress.Size = UDim2.new((config.CurrentValue - config.Range[1]) / (config.Range[2] - config.Range[1]), 0, 1, 0)
            progress.BackgroundColor3 = Color3.fromRGB(50, 138, 220)
            progress.Parent = sliderBar

            local progressCorner = Instance.new("UICorner")
            progressCorner.CornerRadius = UDim.new(0, 4)
            progressCorner.Parent = progress

            local function updateSlider(input)
                local range = config.Range[2] - config.Range[1]
                local relativePos = (input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
                local newValue = math.clamp(config.Range[1] + (relativePos * range), config.Range[1], config.Range[2])
                newValue = math.round(newValue / config.Increment) * config.Increment
                progress.Size = UDim2.new((newValue - config.Range[1]) / range, 0, 1, 0)
                config.CurrentValue = newValue
                if config.Callback then
                    config.Callback(newValue)
                end
            end

            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    updateSlider(input)
                end
            end)

            sliderBar.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                    updateSlider(input)
                end
            end)

            return {
                Set = function(value)
                    local range = config.Range[2] - config.Range[1]
                    config.CurrentValue = math.clamp(value, config.Range[1], config.Range[2])
                    progress.Size = UDim2.new((config.CurrentValue - config.Range[1]) / range, 0, 1, 0)
                    if config.Callback then
                        config.Callback(config.CurrentValue)
                    end
                end
            }
        end

        function tab:CreateInput(config)
            local input = Instance.new("Frame")
            input.Size = UDim2.new(1, -10, 0, 40)
            input.BackgroundTransparency = 1
            input.Parent = tabContent

            local textBox = Instance.new("TextBox")
            textBox.Size = UDim2.new(1, 0, 1, 0)
            textBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            textBox.BackgroundTransparency = 0.4
            textBox.Text = config.CurrentValue or ""
            textBox.PlaceholderText = config.PlaceholderText or ""
            textBox.TextColor3 = Color3.fromRGB(240, 240, 240)
            textBox.TextScaled = true
            textBox.Font = Enum.Font.SourceSans
            textBox.Parent = input

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = textBox

            textBox.FocusLost:Connect(function()
                if config.RemoveTextAfterFocusLost then
                    textBox.Text = ""
                end
                if config.Callback then
                    config.Callback(textBox.Text)
                end
            end)

            return {
                Set = function(newText)
                    textBox.Text = newText
                    if config.Callback then
                        config.Callback(newText)
                    end
                end
            }
        end

        function tab:CreateDropdown(config)
            local dropdown = Instance.new("Frame")
            dropdown.Size = UDim2.new(1, -10, 0, 40)
            dropdown.BackgroundTransparency = 1
            dropdown.Parent = tabContent

            local dropdownButton = Instance.new("TextButton")
            dropdownButton.Size = UDim2.new(1, 0, 1, 0)
            dropdownButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            dropdownButton.BackgroundTransparency = 0.4
            dropdownButton.Text = table.concat(config.CurrentOption or {"Select"}, ", ")
            dropdownButton.TextColor3 = Color3.fromRGB(240, 240, 240)
            dropdownButton.TextScaled = true
            dropdownButton.Font = Enum.Font.SourceSans
            dropdownButton.Parent = dropdown

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = dropdownButton

            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Size = UDim2.new(1, 0, 0, 0)
            dropdownFrame.Position = UDim2.new(0, 0, 1, 0)
            dropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            dropdownFrame.BackgroundTransparency = 0.4
            dropdownFrame.Visible = false
            dropdownFrame.ClipsDescendants = true
            dropdownFrame.Parent = dropdown

            local dropdownLayout = Instance.new("UIListLayout")
            dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
            dropdownLayout.Parent = dropdownFrame

            local function updateDropdown()
                dropdownButton.Text = table.concat(config.CurrentOption or {"Select"}, ", ")
                if config.Callback then
                    config.Callback(config.CurrentOption)
                end
            end

            local function toggleDropdown()
                dropdownFrame.Visible = not dropdownFrame.Visible
                dropdownFrame:TweenSize(dropdownFrame.Visible and UDim2.new(1, 0, 0, #config.Options * 30) or UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.3, true)
            end

            dropdownButton.MouseButton1Click:Connect(toggleDropdown)

            local function refreshOptions()
                for _, child in pairs(dropdownFrame:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                for _, option in pairs(config.Options) do
                    local optionButton = Instance.new("TextButton")
                    optionButton.Size = UDim2.new(1, 0, 0, 30)
                    optionButton.BackgroundTransparency = 0.4
                    optionButton.Text = option
                    optionButton.TextColor3 = Color3.fromRGB(240, 240, 240)
                    optionButton.TextScaled = true
                    optionButton.Font = Enum.Font.SourceSans
                    optionButton.Parent = dropdownFrame

                    optionButton.MouseButton1Click:Connect(function()
                        if config.MultipleOptions then
                            if not table.find(config.CurrentOption, option) then
                                table.insert(config.CurrentOption, option)
                            else
                                table.remove(config.CurrentOption, table.find(config.CurrentOption, option))
                            end
                        else
                            config.CurrentOption = {option}
                        end
                        updateDropdown()
                        toggleDropdown()
                    end)
                end
            end

            refreshOptions()

            return {
                Set = function(options)
                    config.CurrentOption = options
                    updateDropdown()
                end,
                Refresh = function(newOptions)
                    config.Options = newOptions
                    refreshOptions()
                end,
                CurrentOption = config.CurrentOption
            }
        end

        function tab:CreateKeybind(config)
            local keybind = Instance.new("TextButton")
            keybind.Size = UDim2.new(1, -10, 0, 40)
            keybind.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            keybind.BackgroundTransparency = 0.4
            keybind.Text = config.Name or "Keybind: " .. (config.CurrentKeybind or "None")
            keybind.TextColor3 = Color3.fromRGB(240, 240, 240)
            keybind.TextScaled = true
            keybind.TextXAlignment = Enum.TextXAlignment.Left
            keybind.Font = Enum.Font.SourceSans
            keybind.Parent = tabContent

            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = keybind

            local binding = false
            keybind.MouseButton1Click:Connect(function()
                binding = true
                keybind.Text = config.Name .. ": ..."
            end)

            UserInputService.InputBegan:Connect(function(input)
                if binding and input.UserInputType == Enum.UserInputType.Keyboard then
                    config.CurrentKeybind = input.KeyCode.Name
                    keybind.Text = config.Name .. ": " .. config.CurrentKeybind
                    binding = false
                    if config.Callback then
                        config.Callback(config.CurrentKeybind)
                    end
                elseif input.KeyCode.Name == config.CurrentKeybind and config.HoldToInteract then
                    if config.Callback then
                        config.Callback(true)
                    end
                end
            end)

            return {
                Set = function(newKey)
                    config.CurrentKeybind = newKey
                    keybind.Text = config.Name .. ": " .. newKey
                    if config.Callback then
                        config.Callback(newKey)
                    end
                end,
                CurrentKeybind = config.CurrentKeybind
            }
        end

        function tab:CreateLabel(title, icon, color, ignoreTheme)
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -10, 0, 30)
            label.BackgroundTransparency = 1
            label.Text = title
            label.TextColor3 = color or Color3.fromRGB(240, 240, 240)
            label.TextScaled = true
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Font = Enum.Font.SourceSans
            label.Parent = tabContent

            return {
                Set = function(newTitle, newIcon, newColor, newIgnoreTheme)
                    label.Text = newTitle
                    label.TextColor3 = newColor or label.TextColor3
                end
            }
        end

        function tab:CreateParagraph(config)
            local paragraph = Instance.new("Frame")
            paragraph.Size = UDim2.new(1, -10, 0, 60)
            paragraph.BackgroundTransparency = 1
            paragraph.Parent = tabContent

            local title = Instance.new("TextLabel")
            title.Size = UDim2.new(1, 0, 0, 20)
            title.BackgroundTransparency = 1
            title.Text = config.Title or ""
            title.TextColor3 = Color3.fromRGB(240, 240, 240)
            title.TextScaled = true
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Font = Enum.Font.SourceSansBold
            title.Parent = paragraph

            local content = Instance.new("TextLabel")
            content.Size = UDim2.new(1, 0, 0, 40)
            content.Position = UDim2.new(0, 0, 0, 20)
            content.BackgroundTransparency = 1
            content.Text = config.Content or ""
            content.TextColor3 = Color3.fromRGB(200, 200, 200)
            content.TextScaled = true
            content.TextWrapped = true
            content.Font = Enum.Font.SourceSans
            content.Parent = paragraph

            return {
                Set = function(newConfig)
                    title.Text = newConfig.Title or title.Text
                    content.Text = newConfig.Content or content.Text
                end
            }
        end

        return tab
    end

    function window:Destroy()
        ScreenGui:Destroy()
    end

    -- Show first tab by default
    if #tabContainer:GetChildren() > 1 then
        tabContainer:GetChildren()[2]:FireEvent("MouseButton1Click")
    end

    return window
end

-- Show loading screen on initialization
showLoadingScreen()

return AstraHub
